/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';

export type WhitelistEntry = {
  discriminator: bigint;
  parent: Address;
  whitelisted: Address;
  rateLimiting: bigint;
};

export type WhitelistEntryArgs = {
  discriminator: number | bigint;
  parent: Address;
  whitelisted: Address;
  rateLimiting: number | bigint;
};

export function getWhitelistEntryEncoder(): Encoder<WhitelistEntryArgs> {
  return getStructEncoder([
    ['discriminator', getU64Encoder()],
    ['parent', getAddressEncoder()],
    ['whitelisted', getAddressEncoder()],
    ['rateLimiting', getU64Encoder()],
  ]);
}

export function getWhitelistEntryDecoder(): Decoder<WhitelistEntry> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['parent', getAddressDecoder()],
    ['whitelisted', getAddressDecoder()],
    ['rateLimiting', getU64Decoder()],
  ]);
}

export function getWhitelistEntryCodec(): Codec<
  WhitelistEntryArgs,
  WhitelistEntry
> {
  return combineCodec(getWhitelistEntryEncoder(), getWhitelistEntryDecoder());
}

export function decodeWhitelistEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<WhitelistEntry, TAddress>;
export function decodeWhitelistEntry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<WhitelistEntry, TAddress>;
export function decodeWhitelistEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<WhitelistEntry, TAddress> | MaybeAccount<WhitelistEntry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getWhitelistEntryDecoder()
  );
}

export async function fetchWhitelistEntry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<WhitelistEntry, TAddress>> {
  const maybeAccount = await fetchMaybeWhitelistEntry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWhitelistEntry<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<WhitelistEntry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeWhitelistEntry(maybeAccount);
}

export async function fetchAllWhitelistEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<WhitelistEntry>[]> {
  const maybeAccounts = await fetchAllMaybeWhitelistEntry(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeWhitelistEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<WhitelistEntry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeWhitelistEntry(maybeAccount)
  );
}
