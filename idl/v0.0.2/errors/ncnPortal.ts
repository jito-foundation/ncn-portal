/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { NCN_PORTAL_PROGRAM_ADDRESS } from '../programs';

/** NcnPortalWhitelistAdminInvalid: NcnPortalWhitelistAdminInvalid */
export const NCN_PORTAL_ERROR__NCN_PORTAL_WHITELIST_ADMIN_INVALID = 0x0; // 0
/** NcnPortalParentInvalid: NcnPortalParentInvalid */
export const NCN_PORTAL_ERROR__NCN_PORTAL_PARENT_INVALID = 0x1; // 1
/** NcnPortalWhitelistedInvalid: NcnPortalWhitelistedInvalid */
export const NCN_PORTAL_ERROR__NCN_PORTAL_WHITELISTED_INVALID = 0x2; // 2
/** ArithmeticOverflow: ArithmeticOverflow */
export const NCN_PORTAL_ERROR__ARITHMETIC_OVERFLOW = 0xbb8; // 3000
/** ArithmeticUnderflow: ArithmeticUnderflow */
export const NCN_PORTAL_ERROR__ARITHMETIC_UNDERFLOW = 0xbb9; // 3001
/** DivisionByZero: DivisionByZero */
export const NCN_PORTAL_ERROR__DIVISION_BY_ZERO = 0xbba; // 3002

export type NcnPortalError =
  | typeof NCN_PORTAL_ERROR__ARITHMETIC_OVERFLOW
  | typeof NCN_PORTAL_ERROR__ARITHMETIC_UNDERFLOW
  | typeof NCN_PORTAL_ERROR__DIVISION_BY_ZERO
  | typeof NCN_PORTAL_ERROR__NCN_PORTAL_PARENT_INVALID
  | typeof NCN_PORTAL_ERROR__NCN_PORTAL_WHITELIST_ADMIN_INVALID
  | typeof NCN_PORTAL_ERROR__NCN_PORTAL_WHITELISTED_INVALID;

let ncnPortalErrorMessages: Record<NcnPortalError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  ncnPortalErrorMessages = {
    [NCN_PORTAL_ERROR__ARITHMETIC_OVERFLOW]: `ArithmeticOverflow`,
    [NCN_PORTAL_ERROR__ARITHMETIC_UNDERFLOW]: `ArithmeticUnderflow`,
    [NCN_PORTAL_ERROR__DIVISION_BY_ZERO]: `DivisionByZero`,
    [NCN_PORTAL_ERROR__NCN_PORTAL_PARENT_INVALID]: `NcnPortalParentInvalid`,
    [NCN_PORTAL_ERROR__NCN_PORTAL_WHITELIST_ADMIN_INVALID]: `NcnPortalWhitelistAdminInvalid`,
    [NCN_PORTAL_ERROR__NCN_PORTAL_WHITELISTED_INVALID]: `NcnPortalWhitelistedInvalid`,
  };
}

export function getNcnPortalErrorMessage(code: NcnPortalError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (ncnPortalErrorMessages as Record<NcnPortalError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isNcnPortalError<TProgramErrorCode extends NcnPortalError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    NCN_PORTAL_PROGRAM_ADDRESS,
    code
  );
}
