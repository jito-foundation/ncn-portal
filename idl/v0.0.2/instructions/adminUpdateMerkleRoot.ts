/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { NCN_PORTAL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADMIN_UPDATE_MERKLE_ROOT_DISCRIMINATOR = 1;

export function getAdminUpdateMerkleRootDiscriminatorBytes() {
  return getU8Encoder().encode(ADMIN_UPDATE_MERKLE_ROOT_DISCRIMINATOR);
}

export type AdminUpdateMerkleRootInstruction<
  TProgram extends string = typeof NCN_PORTAL_PROGRAM_ADDRESS,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhitelist extends string
        ? WritableAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type AdminUpdateMerkleRootInstructionData = {
  discriminator: number;
  root: ReadonlyUint8Array;
};

export type AdminUpdateMerkleRootInstructionDataArgs = {
  root: ReadonlyUint8Array;
};

export function getAdminUpdateMerkleRootInstructionDataEncoder(): Encoder<AdminUpdateMerkleRootInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({
      ...value,
      discriminator: ADMIN_UPDATE_MERKLE_ROOT_DISCRIMINATOR,
    })
  );
}

export function getAdminUpdateMerkleRootInstructionDataDecoder(): Decoder<AdminUpdateMerkleRootInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getAdminUpdateMerkleRootInstructionDataCodec(): Codec<
  AdminUpdateMerkleRootInstructionDataArgs,
  AdminUpdateMerkleRootInstructionData
> {
  return combineCodec(
    getAdminUpdateMerkleRootInstructionDataEncoder(),
    getAdminUpdateMerkleRootInstructionDataDecoder()
  );
}

export type AdminUpdateMerkleRootInput<
  TAccountWhitelist extends string = string,
  TAccountAdmin extends string = string,
> = {
  whitelist: Address<TAccountWhitelist>;
  admin: TransactionSigner<TAccountAdmin>;
  root: AdminUpdateMerkleRootInstructionDataArgs['root'];
};

export function getAdminUpdateMerkleRootInstruction<
  TAccountWhitelist extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof NCN_PORTAL_PROGRAM_ADDRESS,
>(
  input: AdminUpdateMerkleRootInput<TAccountWhitelist, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): AdminUpdateMerkleRootInstruction<
  TProgramAddress,
  TAccountWhitelist,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? NCN_PORTAL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whitelist: { value: input.whitelist ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whitelist),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getAdminUpdateMerkleRootInstructionDataEncoder().encode(
      args as AdminUpdateMerkleRootInstructionDataArgs
    ),
  } as AdminUpdateMerkleRootInstruction<
    TProgramAddress,
    TAccountWhitelist,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedAdminUpdateMerkleRootInstruction<
  TProgram extends string = typeof NCN_PORTAL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whitelist: TAccountMetas[0];
    admin: TAccountMetas[1];
  };
  data: AdminUpdateMerkleRootInstructionData;
};

export function parseAdminUpdateMerkleRootInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAdminUpdateMerkleRootInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whitelist: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getAdminUpdateMerkleRootInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
